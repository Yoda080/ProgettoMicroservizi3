

services:
  # ----------------------------------------
  # 1. SERVIZIO DATABASE MS SQL SERVER
  # (Il database viene creato dallo script in db_init)
  # ----------------------------------------
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql_db
    restart: always
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: LaTuaPasswordComplessa123!
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
       # ./db_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "LaTuaPasswordComplessa123!", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s 

  # ----------------------------------------
  # 2. MICROSERVIZIO USER (.NET)
  # ----------------------------------------
  users:
    build: 
      context: .
      dockerfile: ./UserService/Dockerfile
    container_name: user_service
    restart: always
    ports:
      - "5001:5001"
    environment:
      ConnectionStrings__DefaultConnection: "Server=mssql,1433;Database=users_db;User Id=sa;Password=LaTuaPasswordComplessa123!;TrustServerCertificate=true;"
      ASPNETCORE_URLS: http://+:5001
      JwtSettings__SecretKey: "LaTuaChiaveSegretaSuperSicuraAlmeno32Caratteri"
      JwtSettings__Issuer: "UserService"
      JwtSettings__Audience: "MovieRentalApp"
    depends_on:
      mssql:
        condition: service_started
    # Rimosso il comando personalizzato per far avviare l'app nel modo standard.

  # ----------------------------------------
  # 3. MICROSERVIZIO MOVIE CATALOG (.NET)
  # ----------------------------------------
  moviecatalog:
    build: 
      context: .
      dockerfile: ./MovieCatalogService/Dockerfile 
    container_name: movie_catalog_service
    restart: always
    ports:
      - "5002:5002"
    environment:
      ConnectionStrings__DefaultConnection: "Server=mssql,1433;Database=movies_db;User Id=sa;Password=LaTuaPasswordComplessa123!;TrustServerCertificate=true;"
      ASPNETCORE_URLS: http://+:5002
      Services__UserService: "http://users:5001"
      Services__RentalService: "http://rentals:5003"
      JwtSettings__SecretKey: "LaTuaChiaveSegretaSuperSicuraAlmeno32Caratteri"
      JwtSettings__Issuer: "UserService"
      JwtSettings__Audience: "MovieRentalApp"
    depends_on:
      mssql:
        condition: service_started 
      users:
        condition: service_started
    # Rimosso il comando personalizzato.

  # ----------------------------------------
  # 4. MICROSERVIZIO RENTALS (.NET)
  # ----------------------------------------
  rentals:
    build: 
      context: .
      dockerfile: ./Rentals/Dockerfile
    container_name: rentals_service
    restart: always
    ports:
      - "5003:5003"
    environment:
      ConnectionStrings__DefaultConnection: "Server=mssql,1433;Database=rentals_db;User Id=sa;Password=LaTuaPasswordComplessa123!;TrustServerCertificate=true;"
      ASPNETCORE_URLS: http://+:5003
      Services__UserService: "http://users:5001"
      Services__MovieService: "http://moviecatalog:5002"
      JwtSettings__SecretKey: "LaTuaChiaveSegretaSuperSicuraAlmeno32Caratteri"
      JwtSettings__Issuer: "UserService"
      JwtSettings__Audience: "MovieRentalApp"
    depends_on:
      mssql:
        condition: service_started 
      users:
        condition: service_started
      moviecatalog:
        condition: service_started
    # Rimosso il comando personalizzato.

  # ----------------------------------------
  # 5. FRONTEND REACT (Nginx)
  # ----------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_react
    restart: always
    ports:
      - "3000:80"
    depends_on:
      users:
        condition: service_started
      rentals:
        condition: service_started
      moviecatalog:
        condition: service_started

volumes:
  mssql-data: {}

